import logging
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from config import Config
from database import Database
from search_api import MovieSearchAPI
from datetime import datetime
from logger import logger, log_message, log_error

logging.basicConfig(level=logging.INFO)

config = Config()
bot = Bot(token=config.BOT_TOKEN)
dp = Dispatcher()
db = Database(config.DB_PATH)
movie_api = MovieSearchAPI()

@dp.message(Command('start'))
async def send_welcome(message: types.Message):
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤."
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞, –∏ —è –Ω–∞–π–¥—É –≥–¥–µ –µ–≥–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å!\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/history - –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞\n"
        "/stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ñ–∏–ª—å–º–∞–º"
    )

@dp.message(Command('help'))
async def send_help(message: types.Message):
    await message.reply(
        "/history - –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞\n"
        "/stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–∏—Å–∫–∞"
    )

@dp.message(Command('history'))
async def show_history(message: types.Message):
    history = await db.get_search_history(message.from_user.id)
    if not history:
        await message.reply("–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ –ø—É—Å—Ç–∞")
        return

    text = "–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞:\n\n"
    for query, date in history:
        text += f"üîç {query} - {date}\n"
    
    await message.reply(text)

@dp.message(Command('stats'))
async def show_stats(message: types.Message):
    stats = await db.get_movie_stats(message.from_user.id)
    if not stats:
        await message.reply("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞")
        return

    text = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞:\n\n"
    for movie_title, count in stats:
        text += f"üé¨ {movie_title}: {count} —Ä–∞–∑(–∞)\n"
    
    await message.reply(text)

@dp.message(F.text)
async def search_movie(message: types.Message):
    try:
        user_id = message.from_user.id
        query = message.text
        log_message(user_id, f"Searching for: {query}")
        
        await db.add_search_history(user_id, query)
        
        link = await movie_api.search_movie(query)
        if not link:
            await message.reply(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç—Ç–æ—Ç —Ñ–∏–ª—å–º üò¢\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–∏—Å–∫–∞—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∏–ª—å–º."
            )
            return

        await db.update_movie_stats(user_id, link, query)

        text = f"üé¨ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è \"{query}\":\n\n"
        text += f"{link}\n\n"

        await message.reply(text)
        log_message(user_id, f"Successfully sent {len(link)} links")
        
    except Exception as e:
        log_error(e, "search_movie")
        await message.reply(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ñ–∏–ª—å–º–∞ üò¢\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def main():
    await db.init()
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main()) 